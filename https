without https your http messages are simply in plain text. This includes things like password or
credit card info.

we need https so that we can encrypt sensitive data being exchanged between a client and server.

using https http messages are sent in an encrypted form, using TLS protocol. Transport Layer Security.

The TLS handshake has various steps.

Step 1: a TCP connection is made between client and server through the 3-way handshake, just like with http.

Step 2: This is where the TLS handshake actually begins, with a certificate check. The browser sends a Client
Hello to the server. In this message the client tells the server what TLS version it can support, and what cipher
suite it supports (set of encryption algorithms).
After receiving the Client Hello, the server chooses what TLS version and cipher suite to use based on the options
given in the Client Hello message. It sends its choices in a Server Hello message back to the client. It also
sends the certificate to the client. One of the key things the certificate includes is the public key.
The public key is used for asymmetric encryption, data encrypted by the public key can only be decrypted by the
private key.

Step 3: After the client server have agreed upon what TLS version/cipher suite to use, and the client has the
encryption certificate key exchange begins. This is where the client and server come up with a shared encryption
key to use for encrypting data.
This is where the asymmetric encryption actually occurs. Data is encrypted on the client side using the public
key from the server. This data can then only be decrypted by the server. The encryption is incurred in the client
key exchange message sent to the server.
The exact details of what goes on with the client key exchange message varies depending on cipher suite used.
with RSA for example, the client generates a session key and encrypts it with the server public key. The encrypted
session key is then sent to the server.
The server receives the encrypted session key and decrypts it using its private key. Now both sides hold the session
key.

Step 4: the client and server can now utilize the session key and the cipher suite to exchange data in a secure
bi-directional channel.